/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import framekwork.IMAPHandler;
import framekwork.MailAccountMap;
import framekwork.SelectedFileReader;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author kiefer
 */
public class MainFrame extends javax.swing.JFrame implements PropertyChangeListener {

    private JFileChooser mChooser;
    private Task mTask;
     
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        mChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "*.csv, *.txt", "txt", "csv");
        mChooser.setFileFilter(filter);
        
        mProgressBar.setValue(0);
        mProgressBar.setStringPainted(true);
    }
    

  
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
       if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            mProgressBar.setValue(progress);
            mLabelInfo.setText(String.format(
                    "Completed %d%% of transfer.\n", mTask.getProgress()));
        } 
    }
    
     class Task extends SwingWorker<Void, Void> {
        private ArrayList<MailAccountMap> mMailAccountList;

        private Task(ArrayList<MailAccountMap> mMailAccountList) {
           this.mMailAccountList = mMailAccountList;  
           mLabelInfo.setText("found " + mMailAccountList.size() + " accounts to transfer");
        }
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            int progress = 0;
            int progressStep = 100/mMailAccountList.size();
            
            IMAPHandler mHandler = new IMAPHandler();
            //Initialize progress property.
            setProgress(0);
            

            for (MailAccountMap mMap : mMailAccountList) {
                if (mHandler.transferMailAccount(mMap)) {
                    System.out.println(mMap + " transferred");
                } else {
                    System.out.println(mMap + " ot transferred.");
                }
        
                progress += progressStep;
                setProgress(progress);
            }
       
            return null;
        }
 
        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            mButtonStart.setEnabled(true);
            setCursor(null); //turn off the wait cursor
            mLabelSeparator.setText("Done!\n");
        }
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        mLabelSeparator = new javax.swing.JLabel();
        mButtonStart = new javax.swing.JButton();
        mButtonChooseFile = new javax.swing.JButton();
        mTextFieldFilePath = new javax.swing.JTextField();
        mLabelFile = new javax.swing.JLabel();
        mProgressBar = new javax.swing.JProgressBar();
        mLabelInfo = new javax.swing.JLabel();
        mComboBoxSeparator = new javax.swing.JComboBox<>();
        jCheckBoxHeaderRow = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SelectedMailTransfer");

        mLabelSeparator.setText("Separator:");

        mButtonStart.setText("Start");
        mButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonStartActionPerformed(evt);
            }
        });

        mButtonChooseFile.setText("Choose File");
        mButtonChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mButtonChooseFileActionPerformed(evt);
            }
        });

        mTextFieldFilePath.setEnabled(false);

        mLabelFile.setText("File:");

        mComboBoxSeparator.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ",", ";" }));

        jCheckBoxHeaderRow.setSelected(true);
        jCheckBoxHeaderRow.setText("Header Row");
        jCheckBoxHeaderRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHeaderRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mLabelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(mLabelFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(mButtonChooseFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mTextFieldFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(mComboBoxSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBoxHeaderRow))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mButtonStart))
                    .addComponent(mLabelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mComboBoxSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mLabelSeparator))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mButtonChooseFile)
                            .addComponent(mTextFieldFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mLabelFile))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxHeaderRow)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(mButtonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mLabelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonStartActionPerformed
        String mSeparator = mComboBoxSeparator.getSelectedItem().toString();
        File mFile = mChooser.getSelectedFile();
        boolean mHeaderRow = jCheckBoxHeaderRow.isSelected();
        
        if (mFile == null) {
            System.out.println("Please choose a file");
            return;
        }
        
        ArrayList<MailAccountMap> mMailAccountList = SelectedFileReader.read(mFile, mSeparator, mHeaderRow);
	System.out.println(mMailAccountList);
        
        mButtonStart.setEnabled(false);
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //Instances of javax.swing.SwingWorker are not reusuable, so
        //we create new instances as needed.
        mTask = new Task(mMailAccountList);
        mTask.addPropertyChangeListener(this);
        mTask.execute();
        
        
       
    }//GEN-LAST:event_mButtonStartActionPerformed

    private void mButtonChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mButtonChooseFileActionPerformed

        int returnVal = mChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: "
                    + mChooser.getSelectedFile().getName());
            mTextFieldFilePath.setText(mChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_mButtonChooseFileActionPerformed

    private void jCheckBoxHeaderRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHeaderRowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHeaderRowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        try {
            //</editor-fold>
        UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxHeaderRow;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton mButtonChooseFile;
    private javax.swing.JButton mButtonStart;
    private javax.swing.JComboBox<String> mComboBoxSeparator;
    private javax.swing.JLabel mLabelFile;
    private javax.swing.JLabel mLabelInfo;
    private javax.swing.JLabel mLabelSeparator;
    private javax.swing.JProgressBar mProgressBar;
    private javax.swing.JTextField mTextFieldFilePath;
    // End of variables declaration//GEN-END:variables
}
